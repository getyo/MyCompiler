
// ###### 左递归的非终结符只能放在其他产生式最后（除它本身左递归的产生式外） ###

//ACTION的结构如下：
//1. num.num = num.num op num.num
//2. num.num = fun(num.num,num.num)
//其中num.num为一个元素，第一个数字代表所需语法符号在产生式中的位置，产生式头为0，依次类推。
//第二个num代表该语法符号对于的属性值，每个终结符的属性值固定如下：
//0：lexeme 1:val 2：row 3:col 4:typeID
//对应toekn的属性，注意val仅对digit有效（缺省-1），typeID仅对类型有效，如int等（缺省-1）
//终结符属性值各有不同，所以这里不做规定，但每个终结符最多有8个属性值，每个属性值占4字节
//但需要注意，每个终结符下标为7的属性值（最后一属性）一定是其生成的中间代码索引（缺省为-1）
//生成的中间代码全部以字符串形式存在于某一容器中，这里只保存其下标
//op代表运算操作：+ - * /等
//fun代表辅助函数，下面有定义,:前是函数名，:后是参数个数,注释中写具体参数



//辅助函数定义
//下面的辅助函数使用并不进行参数检查，需要小心

//0:创建一个新的命名空间,并把当前命名空间压入命名栈中，设置为栈顶
NewEnv : 0

//1:销毁命名空间，将命名栈顶置为上一个命名空间
PopEnv : 0

//2:创建临时三元式的临时变量，会增加数据区的大小和当前Env的offset，
//但Env的变量表中并不会含有该变量，返回临时变量的地址
//typeID
NewTemp : 1

//3:将id的定义压入Env中，并且会检查是否重复定义
//para: id.lexeme,typeID
EnvPush : 2

//4:根据lexeme从Env的符号表中查找，并返回其地址
//id.lexemem
EnvGetAddr : 1

//5:根据lexeme从Env的符号表中查找，并返回其类型
//id.lexemem
EnvGetType : 1

//6:根据lexeme从Env的符号表中查找，并返回其宽度
//id.lexemem
EnvGetWidth : 1

//7 获取符号表项指针
//id.lexeme
EnvGetEntry : 1

//8:中间代码生成,根据前三个参数生成中间代码，生成过程中会从codeStart
//位置开始查找codeStore，如果有和要生成的中间代码一致的三元组，返回该三元组index
//operation , triple 1 , triple 2
Gen : 3

//9:更新CodeStart变量，这里保存着当前Expr生成的中间代码的起始下标（一个expr很可能不止一条中间代码）
UpdateCodeStart : 0

//10:向CodeStore中加入id或者常量,根据addr是否为-1来判断加入的是id还是常量
//addr , val
InsertElem : 2

//11: 创建数组类型，并返回其typeID
//elemTypeID（要创建什么类型的数组）,元素个数
CreateArrayType : 2

//12 获取数组类型元素宽度
//arrayTypeID,数组最开始的id.lexeme（用于报错）
GetElemWidth : 1

//13 获取数组类型元素类型
//arrayTypeID,数组最开始的id.lexeme（用于报错）
GetElemType : 1

//14 获取相应类型的大小
//typeID
sizeof : 1

//15 将指定的指令索引加入链表中，等待反向修补,
//第二个参数是1代表使用原来的链表，为其他值则新建链表
//codeIndex,old?
BackPatch : 2

//16 将backpacth链表中的指令中第二个valuenum置为指定值，并删除当前链表
//codeIndex
DoPatch : 1
END$

//关于常数，如果要在属性计算中使用常数，需要使用$n的形式
//所有非终结符默认6号属性为CodeStart, 7号为CodeEnd
StatementList' -> StatementList
StatementList -> StatementList Statement	## 0.6 = 1.6 ; 0.7 = 2.7 ##
StatementList -> Statement					## 0.6 = 1.6 ; 0.7 = 1.7 ##
Statement -> ExprStatement					## 0.6 = 1.6 ; 0.7 = 1.7 ##
Statement -> DefinationStatement			
Statement -> IfStatement					## 0.6 = 1.6 ; 0.7 = 1.7 ##
Statement -> WhileStatement					## 0.6 = 1.6 ; 0.7 = 1.7 ##
Statement -> CompoundStatement				## 0.6 = 1.6 ; 0.7 = 1.7 ##
CompoundStatement -> NewEnv { StatementList } PopEnv		## 0.6 = 3.6 ; 0.7 = 3.7 ##


//类型定义
Type -> BasicType			## 0.0 = 1.0 ##
BasicType -> ValueType		## 0.0 = 1.0 ##
ValueType -> int			## 0.0 = 1.4 ##
ValueType -> float			## 0.0 = 1.4 ##
$$ Type : 0 typeID
$$ BasicType : 0 typeID
$$ ValueType : 0 typeID

//变量定义以及初始化
DefinationStatement -> ## 1.6 = UpdateCodeStart () ## TempStore ## 2.6 = 1.6 ## Defination ;		## 0.6 = 1.6 ; 0.7 = 1.7 ##
Defination -> DeclationList								## 0.6 = 1.6 ; 0.7 = 1.7 ##

DeclationList -> DeclationList , id					## 0.0 = 1.0 ; EnvPush (3.0,0.0) ; 0.6 = 1.6 ; 0.7 = 0.6 + $1 ##
DeclationList -> DeclationList , id ## 4.0 = 1.0 ## Postfix 		## 0.0 = 1.0 ; EnvPush (3.0,4.0) ; 0.6 = 1.6 ; 0.7 = 0.6 + $1 ##  
DeclationList -> DeclationList , id = Expr				## 0.0 = 1.0 ; EnvPush (3.0,0.0) ; 0.1 = EnvGetEntry (3.0) ; 0.7 = $-1 ; 0.6 = InsertElem (0.1,0.7) ; 0.6 = Gen ('=',0.6,5.6) ; 0.7 = 0.6 + $1 ##
DeclationList -> Declation								## 0.0 = 1.0 ; 0.6 = -1.6 ; 0.7 = 0.6 + $1 ##
DeclationList -> Intialization							## 0.0 = 1.0 ; 0.6 = -1.6 ; 0.7 = 0.6 + $1 ##
$$ DeclationList : 0 typeID/elemID 
$$ Declation : 0 typeID
$$ Intialization : 0 typeID 1 idAddr

Declation -> DirectDeclation							## 0.0 = 1.0 ##
Declation -> PostfixDeclation							## 0.0 = 1.5 ##
DirectDeclation -> Type id								## 0.0 = 1.0 ; EnvPush (2.0,1.0) ##
PostfixDeclation -> Type id	 ## 3.0 = 1.0 ## Postfix		## 0.0 = 3.0 ; EnvPush (2.0,0.0) ##
Postfix -> [ digit ] ## 4.0 = -1.0 ## Postfix				## 0.0 = CreateArrayType (4.0,2.1) ##
Postfix -> [ digit ]										## 0.0 = CreateArrayType (-1.0,2.1) ##
$$ DirectDeclation : 0 typeID
$$ PostfixDeclation : 0 typeID 
$$ - Postfix : 0 elemTypeID
$$ Postfix : 0 arrayTypeID	 


Intialization -> Type id = Expr		## 0.0 = 1.0 ; EnvPush (2.0,1.0) ; 0.1 = EnvGetEntry (2.0) ; 0.7 = $-1 ; 0.6 = InsertElem (0.1,0.7) ; 0.6 = Gen ('=',0.6,4.6) ; 0.7 = 0.6 + $1 ##

//计算表达式
ExprStatement -> TempStore ## 1.6 = UpdateCodeStart () ## Expr ;		## 0.6 = 1.6 ; 0.7 = UpdateCodeStart () ##
Expr -> AssignExpr			## 0.1 = 1.1 ; 0.6 = 1.6 ; 0.7 = 1.7 ##
$$ Expr : 1 typeID

//赋值表达式
AssignExpr -> LeftValue =  AssignExpr		## 0.0 = 1.0 ; 0.1 = 1.1 ; 0.6 = Gen ('=',1.6,3.6) ; 0.7 = 0.6 + $1 ##
AssignExpr -> LeftValue += AssignExpr		## 0.0 = 1.0 ; 0.1 = 1.1 ; 0.6 = Gen ('+=',1.6,3.6) ; 0.7 = 0.6 + $1 ##
AssignExpr -> LeftValue -= AssignExpr		## 0.0 = 1.0 ; 0.1 = 1.1 ; 0.6 = Gen ('-=',1.6,3.6) ; 0.7 = 0.6 + $1 ##
AssignExpr -> LeftValue *= AssignExpr		## 0.0 = 1.0 ; 0.1 = 1.1 ; 0.6 = Gen ('*=',1.6,3.6) ; 0.7 = 0.6 + $1 ##
AssignExpr -> LeftValue /= AssignExpr		## 0.0 = 1.0 ; 0.1 = 1.1 ; 0.6 = Gen ('/=',1.6,3.6) ; 0.7 = 0.6 + $1 ##
AssignExpr -> LogicOrExpr			## 0.6 = 1.6 ; 0.7 = 1.7 ##
$$ AssignExpr : 0 addr 1 typeID

LogicOrExpr -> LogicOrExpr || LogicAndExpr			## 0.6 = Gen ('||',1.6,3.6) ; 0.7 = 0.6 + $1 ##
LogicOrExpr -> LogicAndExpr							## 0.6 = 1.6 ; 0.7 = 1.7 ##

LogicAndExpr -> LogicAndExpr && EqualExpr			## 0.6 = Gen ('&&',1.6,3.6) ; 0.7 = 0.6 + $1 ##
LogicAndExpr -> EqualExpr							## 0.6 = 1.6 ; 0.7 = 1.7 ##

EqualExpr -> EqualExpr == CompareExpr				## 0.6 = Gen ('==',1.6,3.6) ; 0.7 = 0.6 + $1 ##
EqualExpr -> EqualExpr != CompareExpr				## 0.6 = Gen ('!=',1.6,3.6) ; 0.7 = 0.6 + $1 ##
EqualExpr -> CompareExpr							## 0.6 = 1.6 ; 0.7 = 1.7 ##
//比较表达式定义
CompareExpr -> CompareExpr > AddtiveExpr			## 0.6 = Gen ('>',1.6,3.6) ; 0.7 = 0.6 + $1 ##
CompareExpr -> CompareExpr < AddtiveExpr			## 0.6 = Gen ('<',1.6,3.6) ; 0.7 = 0.6 + $1 ##
CompareExpr -> CompareExpr >= AddtiveExpr			## 0.6 = Gen ('>=',1.6,3.6) ; 0.7 = 0.6 + $1 ##
CompareExpr -> CompareExpr <= AddtiveExpr			## 0.6 = Gen ('<=',1.6,3.6) ; 0.7 = 0.6 + $1 ##
CompareExpr -> AddtiveExpr							## 0.6 = 1.6 ; 0.7 = 1.7 ##

//加法表达式
AddtiveExpr -> AddtiveExpr + MultiplicativeExpr		## 0.6 = Gen ('+',1.6,3.6) ; 0.7 = 0.6 + $1 ##
AddtiveExpr -> AddtiveExpr - MultiplicativeExpr		## 0.6 = Gen ('-',1.6,3.6) ; 0.7 = 0.6 + $1 ##
AddtiveExpr -> MultiplicativeExpr						## 0.6 = 1.6 ; 0.7 = 1.7 ##
$$ AddtiveExpr : 0 addr 1 typeID
$$ MultiplicativeExpr : 0 addr 1 typeID 2 val
//乘法表达式
MultiplicativeExpr -> MultiplicativeExpr / PrimaryExpr		## 0.6 = Gen ('/',1.6,3.6) ; 0.7 = 0.6 + $1 ##
MultiplicativeExpr -> MultiplicativeExpr * PrimaryExpr		## 0.6 = Gen ('*',1.6,3.6) ; 0.7 = 0.6 + $1 ##
MultiplicativeExpr -> MultiplicativeExpr % PrimaryExpr		## 0.6 = Gen ('*',1.6,3.6) ; 0.7 = 0.6 + $1 ##
MultiplicativeExpr -> PrimaryExpr							## 0.6 = 1.6 ; 0.7 = 1.7 ##
$$ PrimaryExpr : 0 entryPtr 1 typeID 2 val

//addr = -1,代表当前primaryexpr是常量
//基本表达式
//terminal: 0 lexeme	1 val	2 row	3 col	5 typeID
PrimaryExpr -> id				## 0.0 = EnvGetEntry (1.0) ; 0.1 = EnvGetType (1.0) ; 0.2 = $-1 ; 0.6 = InsertElem (0.0,0.2) ; 0.7 = 0.6 + $1 ##	
PrimaryExpr -> digit			## 0.0 = $-1 ; 0.1 = $0 ; 0.2 = 1.1 ; 0.6 = InsertElem (0.0,0.2) ; 0.7 = 0.6 + $1 ##
PrimaryExpr -> - digit			## 0.0 = $-1 ; 0.1 = $0 ; 0.2 = 2.1 * $-1 ; 0.6 = InsertElem (0.0,0.2) ; 0.7 = 0.6 + $1 ##
PrimaryExpr -> ArrayElem		## 0.0 = 1.0 ; 0.1 = 1.1 ; 0.6 = 1.6 ; 0.7 = 0.6 + $1 ##
PrimaryExpr -> ( Expr )			## 0.0 = 2.0 ; 0.1 = 2.1 ; 0.6 = 2.6 ; 0.7 = 2.7 ##
ArrayElem -> id [ digit ]  ## 5.0 = EnvGetType (1.0) ; 5.0 = GetElemType (5.0) ; 5.1 = EnvGetEntry (1.0) ; 5.7 = $-1 ; 5.6 = InsertElem (5.1,5.7) ; 5.6 = Gen ('[]',5.6 ,3.1) ## Index		## 0.0 = 5.1 ; 0.1 = 5.0 ; 0.6 = 5.6 ; 0.7 = 5.7 ##														
Index -> _NON					## 0.0 = -1.0 ; 0.6 = -1.6 ; 0.7 = 0.6 + $1 ##
Index -> [ digit ]	## 4.0 = GetElemType (-1.0) ; 4.6 = Gen ('[]', -1.6 , 2.1 ) ## Index		## 0.0 = 4.0 ; 0.6 = 4.6 ; 0.7 = 4.7 ##
$$ - Index : 0 arrayTypeID
$$ Index : 0 elemTypeID 
$$ ArrayElem : 0 entryPtr 1 varTypeID 

//左值定义
LeftValue -> id				## 0.0 = EnvGetEntry (1.0) ; 0.7 = $-1 ; 0.6 = InsertElem (0.0,0.7) ; 0.1 = EnvGetType (1.0) ##
LeftValue -> ArrayElem		## 0.1 = 1.1 ; 0.6 = 1.6 ##
$$ LeftValue : 0 addr 1 typeID

BooleanExpr -> Expr			## 0.1 = 1.1 ; 0.6 = 1.6 ; 0.7 = 1.7 ##
$$ BooleanExpr :  1 typeID 

//if语句定义
IfStatement -> if ## 2.6 = UpdateCodeStart () ## TempStore ( BooleanExpr ) ## 2.0 = Gen ('jc',4.6,2.0) ; BackPatch (2.0,-1.0) ## Statement SubIfStatement			## 0.6 = 2.6 ; 0.7 = UpdateCodeStart () ##
SubIfStatement -> else ## 2.0 = $1 ## IfStatement SubIfStatement 
SubIfStatement -> else _NON Statement				## 0.6 = 3.6 ; 0.7 = 3.7 ; DoPatch (0.7) ##
SubIfStatement -> _NON								## 0.7 = UpdateCodeStart () ; DoPatch (0.7) ##
$$ - IfStatement : 0 oldPatchFalg

//while语句定义
WhileStatement -> while ## 2.6 = UpdateCodeStart () ## TempStore  ( BooleanExpr )	## 2.0 = Gen ('jc',4.6,2.0) ; 2.1 = $0 ; BackPatch (2.0,2.1) ## Statement		## 0.6 = 2.6 ; 0.7 = Gen ('jmp',0.6,0.7) + $1 ; DoPatch (0.7) ##

//用于暂存的辅助非终结符
TempStore -> _NON		## 0.0 = -1.0 ; 0.1 = -1.1 ; 0.2 = -1.2 ; 0.3 = -1.3; 0.4 = -1.4; 0.5 = -1.5 ; 0.6 = -1.6 ; 0.7 = -1.7 ##
$$ - TempStore : 0 store0 1 store1 2 store2 3 store3 4 store4 5 store5
$$ TempStore : 0 store0 1 store1 2 store2 3 store3 4 store4 5 store5

//用于创建新的命名空间
NewEnv -> _NON		## NewEnv () ##

//用于弹出当前命名环境
PopEnv -> _NON		## PopEnv () ##