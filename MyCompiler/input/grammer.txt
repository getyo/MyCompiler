//在产生式体中的action两个整数为一组，其中第一个整数代表所需信息所在符号栈内偏移（以上一个语法符号为栈顶元素）
//第二个整数代表所需信息种类：
//0，操作信息，1，数值（常量值），2，类型说明 ，100 所生成中间代码起始指针 , 101 所生成中间代码结束指针 前闭后开
//生成的中间代码全部以字符串形式存在于某一容器中，这里只保存其下标
//如果该信息对于所要求符号来说不存在，则在attribute中将相应位置的值设为-1
//当获取完两个整数所指信息后，会将该信息入栈，注意，第一个整数只计算语法符号栈内偏移，不计算其他造成的栈内偏移
//大括号中的字母串是辅助函数，后面所跟的所有符号都以一对的形式解释为输入参数，辅助函数列表如下：
//SymbolTableAddType(SymtablePtr,Type)


Program' -> Program
Program -> Program SubProgram
SubProgram -> FunctionList _NON
SubProgram -> DefinationStatementList _NON
Program -> _NON

DefinationStatementList -> DefinationStatementList DefinationStatement
DefinationStatementList -> DefinationStatement
FunctionList -> FunctionList Function
FunctionList -> Function

//语句定义
Statement -> ExprStatement
Statement -> IfStatement
Statement -> WhileStatement
Statement -> DefinationStatement
Statement -> CompoundStatement
Statement -> _NON ;

//表达式定义
ExprStatement -> ExprList ;
ExprList -> ExprList , Expr
ExprList -> Expr
Expr -> ComputedExpr
Expr -> CallExpr

//计算表达式
ComputedExpr -> AssignExpr 
ComputedExpr -> LogicOrExpr
//赋值表达式
AssignExpr -> id =  ComputedExpr
AssignExpr -> id += ComputedExpr
AssignExpr -> id -= ComputedExpr
AssignExpr -> id *= ComputedExpr
AssignExpr -> id /= ComputedExpr

LogicOrExpr -> LogicOrExpr || LogicAndExpr
LogicOrExpr -> LogicAndExpr

LogicAndExpr -> LogicAndExpr && EqualExpr 
LogicAndExpr -> EqualExpr

EqualExpr -> EqualExpr == CompareExpr
EqualExpr -> EqualExpr != CompareExpr
EqualExpr -> CompareExpr
//比较表达式定义
CompareExpr -> CompareExpr > AddtiveExpr
CompareExpr -> CompareExpr < AddtiveExpr
CompareExpr -> CompareExpr >= AddtiveExpr
CompareExpr -> CompareExpr <= AddtiveExpr
CompareExpr -> AddtiveExpr
//加法表达式
AddtiveExpr -> AddtiveExpr + MultiplicativeExpr
AddtiveExpr -> AddtiveExpr - MultiplicativeExpr
AddtiveExpr -> MultiplicativeExpr
//乘法表达式
MultiplicativeExpr -> MultiplicativeExpr / LogicExpr
MultiplicativeExpr -> MultiplicativeExpr * LogicExpr
MultiplicativeExpr -> MultiplicativeExpr % LogicExpr
MultiplicativeExpr -> LogicExpr
//逻辑表达式
LogicExpr -> ++ id 
LogicExpr -> -- id
LogicExpr -> id ++
LogicExpr -> id --
LogicExpr -> ! id 
LogicExpr -> * id 
LogicExpr -> & id
LogicExpr -> PrimaryExpr
//基本表达式
PrimaryExpr -> id
PrimaryExpr -> digit
PrimaryExpr -> ( Expr )

//类型定义
Type -> BasicType
BasicType -> ValueType
BasicType -> PointerType
ValueType -> int
ValueType -> float
ValueType -> double
PointerType -> ValueType StarList
StarList -> StartList *
StartList -> *

//变量定义以及初始化
DefinationStatement -> Defination ;
Defination -> Defination , Declation
Defination -> Defination , Intilization
Defination -> Declation
Defination -> Intilization

DeclationList -> DeclationList , id
DeclationList -> Declation
IntilizationList -> IntilizationList , id = ComputedExpr
IntilizationList -> Intilization

Declation -> DirectDeclation
Declation -> ArrayDeclation
DirectDeclation -> Type id
ArrayDeclation -> DirectDeclation AarryPostfixList
AarryPostfixList -> AarryPostfixList [ digit ]
AarryPostfixList -> [ digit ]
Intilization -> DirectDeclation = ComputedExpr

//if语句定义
IfStatement -> if ( Expr ) Statement SubIfStatement
//SubIfStatement -> else IfStatement
SubIfStatement -> else Statement
SubIfStatement -> _NON

//while语句定义
WhileStatement -> while ( Expr ) CompoundStatement

//函数定义
Function -> void id ( ParameterList ) CompoundStatement
Function -> DirectDeclation ( ParameterList ) CompoundStatement
ParameterList -> GeneralParameterList DefaultParameterList
GeneralParameterList -> DirectDeclation GeneralParameterList
GeneralParameterList -> _NON
DefaultParameterList -> DirectDeclation = digit DefaultParameterList
DefaultParameterList -> _NON
CompoundStatement -> { StatementList }
StatementList -> Statement StatementList
StatementList -> _NON